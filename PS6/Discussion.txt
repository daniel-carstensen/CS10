We identified a particular issue, we might run into while in multithreaded operation. Since the OS jumps between
threads at unpredictable times leaving processes in one thread unfinished while computing code in a different thread,
problems might arise when a server communicator thread is in the middle of handling a request but cannot complete the
request because the OS stops the thread and jumps to a different server communicator. That way the master sketch could
be compromised. For instance, one communicator is processing unfinished changes on the master sketch when the OS stops.
Now a different communicator begins changing the master sketch. This might lead to errors or deletion of particular
changes made. To account for this, we created a synchronized method in the server communicator that handles one
particular request, i.e. one line sent by the editor communicator. The synchronization allows the server communicator
to process all changes requested in the line before the OS is able to stop and jump.